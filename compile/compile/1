Param([string]$inputFile=$null, [string]$outputFile=$null, [string]$7=$null, [switch]$verbose, [switch]$debug, [switch]$runtime20, [switch]$runtime40,
	[switch]$x86, [switch]$x64, [int]$lcid, [switch]$Sta, [switch]$Mta, [switch]$noConsole, [switch]$nested, [string]$iconFile=$null,
	[string]$title, [string]$description, [string]$company, [string]$product, [string]$copyright, [string]$trademark, [string]$version,
	[switch]$requireAdmin, [switch]$virtualize, [switch]$credentialGUI, [switch]$noConfigfile, [switch]$longPaths, [switch]$compiler, [switch]$core)

	 function module ($a,$b,$c) {
	switch ($a){
		import {
			$Content = (get-content $b)
			$Content = resource asciidecode $Content
			return (string $Content)
		}
		export {
			$Content = (get-content $b)
			$exportstring = resource asciiencode $Content
			$exportstring | Out-File $c -enc ascii
		}
	}
 <#
    .SYNOPSIS
    Exports or imports  base64 encoded modules
     
    .DESCRIPTION
     VDS
	module export c:\vds\trunk\sum.psm1 c:\vds\trunk\sum.dll
	module import c:\vds\trunk\sum.dll | run
    
    .LINK
    https://dialogshell.com/vds/help/index.php/module
 #>
 }
 
 function resource ($a,$b,$c) {
	switch ($a)
	{
		load {
			return [Byte[]](resource decode (get-content $b))
		}
		import{
			$import = [System.IO.File]::ReadAllBytes($b)
			return [System.Convert]::ToBase64String($import)
		}
		export{
			$export = [System.Convert]::FromBase64String($b)
			[System.IO.File]::WriteAllBytes($c,$export)
		}
		asciiencode{
			$enc = [system.Text.Encoding]::ASCII
			return [System.Convert]::ToBase64String($enc.GetBytes($b))
		}
		asciidecode{
			$decode = [System.Convert]::FromBase64String($b)
			return [System.Text.Encoding]::ASCII.GetString($decode)
		}
		decode {
		return [System.Convert]::FromBase64String($b)
		#although this works, it returns a system object, which is not usable. We need raw. Not sure how to fix.
		}
	}
<#
    .SYNOPSIS
    Comment
     
    .DESCRIPTION
     VDS
    
	$resource = resource load .\resource.res
		#imports and decodes a base64 encoded file
	
	$resource = resource import .\resource.ico
		#import a resource directly from file, imports to base64
	
	resource export $resource .\resource.res
		#Exports a resource to a base64 encoded file
		
	$encode = resource asciiencode "this string"
	
	$decode = resource asciidecode "dGhpcyBzdHJpbmc="
	
	$decode = resource decode $resrouce #not working yet I think
	
    .LINK
    https://dialogshell.com/vds/help/index.php/resource
#>
}


function shortname {
    [cmdletbinding()]
    Param([Parameter(Mandatory=$true,Position=0,ValueFromPipeline=$true,ValueFromPipelineByPropertyName=$true)][array]$Path)
    If ($(Get-Item $Path).PSIsContainer -eq $true) {
        $SFSO = New-Object -ComObject Scripting.FileSystemObject
        $short = $SFSO.GetFolder($($Path)).ShortPath
    } 
    Else {
        $SFSO = New-Object -ComObject Scripting.FileSystemObject
        $short = $SFSO.GetFile($($Path)).ShortPath
    }
    return $short
<#
    .SYNOPSIS
     Returns the 8.3 shortname of a file
     
    .DESCRIPTION
     VDS
    $shortname = $(shortname $file)
    
    .LINK
    https://dialogshell.com/vds/help/index.php/shortname
#>
}

function regread($a,$b) {
    return Get-ItemProperty -Path $a -Name $b | Select -ExpandProperty $b
<#
    .SYNOPSIS
    Returns the value of a registry entry
     
    .DESCRIPTION
     VDS
    $regread = $(regread hkcu:\software\dialogshell window)
    
    .LINK
    https://dialogshell.com/vds/help/index.php/regread
#>
} 

function registry ($a, $b, $c, $d, $e) {
    switch ($a) {
        copykey {
            Copy-Item -Path $b -Destination $c
        }
        deletekey {
            Remove-Item -Path $b -Recurse
        }
        movekey {
            Copy-Item -Path $b -Destination $c
            Remove-Item -Path $b -Recurse
        }
        renamekey {
            Rename-Item -Path $b -NewName $c
        }
		newkey {
            New-Item -Path $b -Name $c
        }
        newitem {
            New-ItemProperty -Path $b -Name $c -PropertyType $d -Value $e
        }
        modifyitem {
            Set-ItemProperty -Path $b -Name $c -Value $d
        }
        renameitem {    
            Rename-ItemProperty -Path $b -Name $c -NewName $d
        }
        deleteitem {    
            Remove-ItemProperty -Path $b -Name $c
        }
    }
<#
    .SYNOPSIS
    Performs registry operations
    copykey
    deletekey
    movekey
    renamekey
    newitem
    modifyitem
    renameitem
    deleteitem
     
    .DESCRIPTION
     VDS
    registry copykey hkcu:\software\dialogshell hklm:\software\dialogshell
    registry deletekey hkcu:\software\dialogshell
    registry movekey hkcu:\software\dialogshell hklm:\software\dialogshell
    registry renamekey hkcu:\software\dialogshell visualdialogshell
    registry newitem 
    
    .LINK
    https://dialogshell.com/vds/help/index.php/registry
#>
}

try{	
$ctf1 = Get-Content -LiteralPath ($inputFile) -Encoding UTF8 -ErrorAction SilentlyContinue
$dll = [io.path]::GetFileNameWithoutExtension($outputFile)+".dll"

$ctf2 = @'